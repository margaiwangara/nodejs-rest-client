{"version":3,"sources":["hooks/authForm.js","components/Auth/AuthForm.js"],"names":["INITIAL_STATE","name","surname","email","password","confirm_password","useAuthForm","page","useState","value","setValue","dispatch","useDispatch","history","useHistory","handleChange","e","target","handleSubmit","authUser","then","console","log","catch","handleForgotPassword","preventDefault","forgotPassword","removeError","alert","error","addError","message","AuthForm","btnText","heading","passwordToggle","setPasswordToggle","confirmPasswordToggle","setConfirmPasswordToggle","onSubmit","useForm","register","errors","useSelector","state","listen","className","style","marginTop","Array","isArray","map","i","key","type","placeholder","onChange","ref","required","position","onClick","passwordToggleStyle","icon","color","marginBottom","to"],"mappings":"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","file":"static/js/19.d9665833.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { authUser, forgotPassword } from '@/store/actions/auth';\r\nimport { addError, removeError } from '@/store/actions/error';\r\n\r\nconst INITIAL_STATE = {\r\n  name: '',\r\n  surname: '',\r\n  email: '',\r\n  password: '',\r\n  confirm_password: '',\r\n};\r\n\r\nfunction useAuthForm(page) {\r\n  const [value, setValue] = useState(INITIAL_STATE);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const handleChange = (e) =>\r\n    setValue({ ...value, [e.target.name]: e.target.value });\r\n\r\n  const handleSubmit = (e) => {\r\n    // e.preventDefault();\r\n\r\n    // check if password and confirm password match\r\n\r\n    authUser(dispatch, page, value, history)\r\n      .then(() => console.log('Login Success'))\r\n      .catch(() => console.log('Login Failed'));\r\n  };\r\n\r\n  const handleForgotPassword = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!value.email) {\r\n      const error = {\r\n        message: 'Please provide an email address',\r\n      };\r\n\r\n      dispatch(addError(error));\r\n      return;\r\n    }\r\n\r\n    forgotPassword(value)\r\n      .then(() => {\r\n        dispatch(removeError());\r\n        alert(\r\n          'An email to reset your password has been sent to the email address provided.',\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        dispatch(addError(error));\r\n      });\r\n  };\r\n\r\n  return {\r\n    value,\r\n    handleChange,\r\n    handleSubmit,\r\n    handleForgotPassword,\r\n  };\r\n}\r\n\r\nexport default useAuthForm;\r\n","import React, { useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { removeError } from '@/store/actions/error';\r\nimport useAuthForm from '@/hooks/authForm';\r\nimport { passwordToggleStyle } from '@/utils/styling';\r\n\r\nfunction AuthForm({ page, btnText, heading }) {\r\n  const [passwordToggle, setPasswordToggle] = useState(false);\r\n  const [confirmPasswordToggle, setConfirmPasswordToggle] = useState(false);\r\n  const {\r\n    value,\r\n    handleChange,\r\n    handleSubmit: onSubmit,\r\n    handleForgotPassword,\r\n  } = useAuthForm(page);\r\n  const { handleSubmit, register, errors } = useForm();\r\n  const { error } = useSelector((state) => state.error);\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  history.listen(() => {\r\n    dispatch(removeError());\r\n  });\r\n\r\n  return (\r\n    <div className=\"card\" style={{ marginTop: '20vh' }}>\r\n      <div className=\"card-body\">\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <h3 className=\"text-center pb-2 border-bottom mb-3\">{heading}</h3>\r\n          {error ? (\r\n            <div className=\"alert alert-danger\">\r\n              {Array.isArray(error.message) ? (\r\n                <ul className=\"list-unstyled p-0 m-0\">\r\n                  {error.message.map((e, i) => (\r\n                    <li key={i}>{e}</li>\r\n                  ))}\r\n                </ul>\r\n              ) : (\r\n                error.message\r\n              )}\r\n            </div>\r\n          ) : (\r\n            ''\r\n          )}\r\n          {page === 'register' ? (\r\n            <div className=\"form-group\">\r\n              <input\r\n                className={`form-control ${errors.name ? 'is-invalid' : ''}`}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Name\"\r\n                value={value.name}\r\n                onChange={handleChange}\r\n                ref={register({ required: true })}\r\n              />\r\n              {errors.name && (\r\n                <span className=\"invalid-feedback\">Name is required</span>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            ''\r\n          )}\r\n          <div className=\"form-group\">\r\n            <input\r\n              className={`form-control ${errors.email ? 'is-invalid' : ''}`}\r\n              type=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"E-Mail\"\r\n              value={value.email}\r\n              onChange={handleChange}\r\n              ref={register({ required: true })}\r\n            />\r\n            {errors.email && (\r\n              <span className=\"invalid-feedback\">Name is required</span>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"form-group\" style={{ position: 'relative' }}>\r\n            <span\r\n              onClick={(e) => setPasswordToggle(!passwordToggle)}\r\n              style={passwordToggleStyle}\r\n            >\r\n              <FontAwesomeIcon\r\n                icon={passwordToggle ? 'eye-slash' : 'eye'}\r\n                color=\"#375a7f\"\r\n              />\r\n            </span>\r\n            <input\r\n              className={`form-control ${errors.password ? 'is-invalid' : ''}`}\r\n              type={passwordToggle ? 'text' : 'password'}\r\n              name=\"password\"\r\n              placeholder=\"Password\"\r\n              value={value.password}\r\n              onChange={handleChange}\r\n              ref={register({ required: true })}\r\n            />\r\n            {errors.password && (\r\n              <span className=\"invalid-feedback\">Password is required</span>\r\n            )}\r\n          </div>\r\n          {page === 'login' && (\r\n            <span\r\n              className=\"small d-flex justify-content-end\"\r\n              style={{ marginTop: '-12px', marginBottom: '10px' }}\r\n            >\r\n              <Link to=\"/forgot-password\" onClick={handleForgotPassword}>\r\n                Forgot Password?\r\n              </Link>\r\n            </span>\r\n          )}\r\n          {page === 'register' ? (\r\n            <div className=\"form-group\" style={{ position: 'relative' }}>\r\n              <span\r\n                style={passwordToggleStyle}\r\n                onClick={(e) =>\r\n                  setConfirmPasswordToggle(!confirmPasswordToggle)\r\n                }\r\n              >\r\n                <FontAwesomeIcon\r\n                  icon={confirmPasswordToggle ? 'eye-slash' : 'eye'}\r\n                  color=\"#375a7f\"\r\n                />\r\n              </span>\r\n              <input\r\n                className={`form-control ${\r\n                  errors.confirm_password ? 'is-invalid' : ''\r\n                }`}\r\n                type={confirmPasswordToggle ? 'text' : 'password'}\r\n                name=\"confirm_password\"\r\n                placeholder=\"Confirm Password\"\r\n                value={value.confirm_password}\r\n                onChange={handleChange}\r\n                ref={register({ required: true })}\r\n              />\r\n              {errors.confirm_password && (\r\n                <span className=\"invalid-feedback\">\r\n                  Confirm Password is required\r\n                </span>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            ''\r\n          )}\r\n\r\n          <button className=\"btn btn-primary btn-block mb-3\" type=\"submit\">\r\n            {btnText}\r\n          </button>\r\n\r\n          <div className=\"text-center p-t-115\">\r\n            <span className=\"txt1\">\r\n              {page === 'login'\r\n                ? 'Don’t have an account? '\r\n                : page === 'register'\r\n                ? 'Already a member? '\r\n                : ''}\r\n            </span>\r\n\r\n            {page === 'login' ? (\r\n              <Link to=\"/register\" className=\"txt2\">\r\n                Register\r\n              </Link>\r\n            ) : page === 'register' ? (\r\n              <Link to=\"/login\" className=\"txt2\">\r\n                Login\r\n              </Link>\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AuthForm;\r\n"],"sourceRoot":""}