{"version":3,"sources":["store/actionTypes.js","store/reducers/auth.js","store/reducers/error.js","store/reducers/index.js","App.js","store/index.js","serviceWorker.js","index.js","utils/Loading.js"],"names":["SET_CURRENT_USER","REMOVE_CURRENT_USER","ADD_ERROR","REMOVE_ERROR","SEND_TWO_FACTOR_CODE","CONFIRM_TWO_FACTOR_CODE","INITIAL_STATE","isAuthenticated","user","code","expiry","authReducer","state","action","type","Object","keys","length","error","errorReducer","rootReducer","combineReducers","library","add","fab","faSpinner","faEyeSlash","faEye","faChevronLeft","faUserEdit","faKey","faPencilAlt","store","middleware","createStore","thunk","applyMiddleware","configureStore","Main","React","lazy","appStyling","width","height","oveflow","App","id","style","Suspense","fallback","Loading","autoHide","maxHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","loadingStyle","position","overflow","backgroundColor","display","alignItems","justifyContent","zIndex","icon","spin","size"],"mappings":"iLAAA,4MAAO,IAAMA,EAAmB,mBACnBC,EAAsB,sBACtBC,EAAY,YACZC,EAAe,eAEfC,EAAuB,uBACvBC,EAA0B,2B,sICCjCC,EAAgB,CACpBC,iBAAiB,EACjBC,KAAM,GACNC,KAAM,KACNC,OAAQ,MAmCKC,MAhCf,WAAqD,IAAhCC,EAA+B,uDAAvBN,EAAeO,EAAQ,uCAClD,OAAQA,EAAOC,MACb,KAAKd,IACH,OAAO,eACFY,EADL,CAEEL,kBAAmBQ,OAAOC,KAAKH,EAAOL,MAAMS,OAC5CT,KAAMK,EAAOL,OAEjB,KAAKJ,IACH,OAAO,eACFQ,EADL,CAEEH,KAAMI,EAAOJ,KACbC,OAAQG,EAAOH,SAGnB,KAAKL,IACH,OAAO,eACFO,EADL,CAEEH,KAAM,KACNC,OAAQ,OAEZ,KAAKT,IACH,OAAO,eACFW,EADL,CAEEL,iBAAiB,EACjBC,KAAM,KAEV,QACE,OAAOI,ICxCPN,EAAgB,CACpBY,MAAO,MAoBMC,MAjBf,WAAsD,IAAhCP,EAA+B,uDAAvBN,EAAeO,EAAQ,uCACnD,OAAQA,EAAOC,MACb,KAAKZ,IACH,OAAO,eACFU,EADL,CAEEM,MAAOL,EAAOK,QAElB,KAAKf,IACH,OAAO,eACFS,EADL,CAEEM,MAAO,OAEX,QACE,OAAON,ICVEQ,EALKC,0BAAgB,CAClCb,OACAU,U,4CCaFI,IAAQC,IACNC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KAGF,IAAMC,ECnBN,WACE,IAPyBC,EAQzB,OADcC,sBAAYd,GAPDa,EAOgCE,IAJrDC,0BAAgBH,KDsBRI,GAERC,EAAOC,IAAMC,MAAK,kBAAM,wDAqB9B,IAAMC,EAAa,CACjBC,MAAO,OACPC,OAAQ,QACRC,QAAS,UAGIC,EAzBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKC,GAAG,MAAMC,MAAON,GACnB,kBAAC,IAAMO,SAAP,CAAgBC,SAAUC,eACxB,kBAAC,IAAD,CAAUlB,MAAOA,GACf,kBAAC,IAAD,CACEmB,UAAU,EACVJ,MAAO,CAAEK,UAAW,QAASV,MAAO,SAEpC,kBAACJ,EAAD,YEhCMe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnD,GACLoD,QAAQpD,MAAMA,EAAMqD,a,gCEzI5B,4BASMC,EAAe,CACnB7B,OAAQ,OACRD,MAAO,OACP+B,SAAU,QACVC,SAAU,SACVC,gBAAiB,4BACjBC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,OAAQ,IAGK7B,IAlBC,kBACd,yBAAKH,MAAOyB,GACV,kBAAC,IAAD,CAAiBQ,KAAK,UAAUC,MAAI,EAACC,KAAK,W","file":"static/js/main.4e6fd4d7.chunk.js","sourcesContent":["export const SET_CURRENT_USER = 'SET_CURRENT_USER';\r\nexport const REMOVE_CURRENT_USER = 'REMOVE_CURRENT_USER';\r\nexport const ADD_ERROR = 'ADD_ERROR';\r\nexport const REMOVE_ERROR = 'REMOVE_ERROR';\r\nexport const RESET_PASSWORD = 'RESET_PASSWORD';\r\nexport const SEND_TWO_FACTOR_CODE = 'SEND_TWO_FACTOR_CODE';\r\nexport const CONFIRM_TWO_FACTOR_CODE = 'CONFIRM_TWO_FACTOR_CODE';\r\nexport const TOGGLE_MODAL = 'TOGGLE_MODAL';\r\n","import {\r\n  SET_CURRENT_USER,\r\n  REMOVE_CURRENT_USER,\r\n  SEND_TWO_FACTOR_CODE,\r\n  CONFIRM_TWO_FACTOR_CODE,\r\n} from '../actionTypes';\r\n\r\nconst INITIAL_STATE = {\r\n  isAuthenticated: false,\r\n  user: {},\r\n  code: null,\r\n  expiry: null,\r\n};\r\n\r\nfunction authReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case SET_CURRENT_USER:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: !!Object.keys(action.user).length,\r\n        user: action.user,\r\n      };\r\n    case SEND_TWO_FACTOR_CODE:\r\n      return {\r\n        ...state,\r\n        code: action.code,\r\n        expiry: action.expiry,\r\n      };\r\n\r\n    case CONFIRM_TWO_FACTOR_CODE:\r\n      return {\r\n        ...state,\r\n        code: null,\r\n        expiry: null,\r\n      };\r\n    case REMOVE_CURRENT_USER:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n        user: {},\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default authReducer;\r\n","import { ADD_ERROR, REMOVE_ERROR } from '../actionTypes';\r\n\r\nconst INITIAL_STATE = {\r\n  error: null,\r\n};\r\n\r\nfunction errorReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case ADD_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      };\r\n    case REMOVE_ERROR:\r\n      return {\r\n        ...state,\r\n        error: null,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default errorReducer;\r\n","import { combineReducers } from 'redux';\r\nimport user from './auth';\r\nimport error from './error';\r\n\r\nconst rootReducer = combineReducers({\r\n  user,\r\n  error,\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport { configureStore } from './store';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\nimport {\n  faSpinner,\n  faEye,\n  faEyeSlash,\n  faChevronLeft,\n  faUserEdit,\n  faKey,\n  faPencilAlt,\n} from '@fortawesome/free-solid-svg-icons';\nimport Loading from '@/utils/Loading';\nimport SimpleBar from 'simplebar-react';\n\n// font-awesome library\nlibrary.add(\n  fab,\n  faSpinner,\n  faEyeSlash,\n  faEye,\n  faChevronLeft,\n  faUserEdit,\n  faKey,\n  faPencilAlt,\n);\n\nconst store = configureStore();\n\nconst Main = React.lazy(() => import('@/container/Main/Main'));\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div id=\"app\" style={appStyling}>\n        <React.Suspense fallback={Loading()}>\n          <Provider store={store}>\n            <SimpleBar\n              autoHide={false}\n              style={{ maxHeight: '100vh', width: '100%' }}\n            >\n              <Main />\n            </SimpleBar>\n          </Provider>\n        </React.Suspense>\n      </div>\n    </HashRouter>\n  );\n}\n\nconst appStyling = {\n  width: '100%',\n  height: '100vh',\n  oveflow: 'hidden',\n};\n\nexport default App;\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nfunction applyWithDevTools(middleware) {\r\n  return process.env.NODE_ENV === 'development'\r\n    ? composeWithDevTools(applyMiddleware(middleware))\r\n    : applyMiddleware(middleware);\r\n}\r\n\r\nfunction configureStore() {\r\n  const store = createStore(rootReducer, applyWithDevTools(thunk));\r\n  return store;\r\n}\r\n\r\nexport { configureStore };\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// css\nimport 'simplebar/dist/simplebar.min.css';\nimport './assets/css/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst Loading = () => (\r\n  <div style={loadingStyle}>\r\n    <FontAwesomeIcon icon=\"spinner\" spin size=\"5x\" />\r\n  </div>\r\n);\r\n\r\nconst loadingStyle = {\r\n  height: '100%',\r\n  width: '100%',\r\n  position: 'fixed',\r\n  overflow: 'hidden',\r\n  backgroundColor: 'rgba(255, 255, 255, 0.25)',\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  zIndex: 50,\r\n};\r\n\r\nexport default Loading;\r\n"],"sourceRoot":""}